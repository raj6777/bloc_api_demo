// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/UserModel.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 1063471547206952795),
      name: 'Datum',
      lastPropertyId: const obx_int.IdUid(7, 6546768341957613386),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6386633648441916203),
            name: 'obxId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6664206619683812981),
            name: 'id',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1839532409205854074),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5190483604927538831),
            name: 'firstName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6067124657658683110),
            name: 'lastName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7530929522124296320),
            name: 'avatar',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6546768341957613386),
            name: 'userModelId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 5312825866473738640),
            relationTarget: 'UserModel')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 8801841628576245264),
      name: 'Support',
      lastPropertyId: const obx_int.IdUid(4, 5180325590126700411),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1522042532796639670),
            name: 'obxId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5539570439785665643),
            name: 'url',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4080123404585513886),
            name: 'text',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5180325590126700411),
            name: 'userModelId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 4539040529534350456),
            relationTarget: 'UserModel')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 3847653414251027679),
      name: 'UserModel',
      lastPropertyId: const obx_int.IdUid(6, 3920231038106913645),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 966602118960572304),
            name: 'obxId',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 55770355145533366),
            name: 'page',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1477244028235199759),
            name: 'perPage',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 821640569120303359),
            name: 'total',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 624841197303683267),
            name: 'totalPages',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3920231038106913645),
            name: 'supportId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 4046563617057149338),
            relationTarget: 'Support')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'data', srcEntity: 'Datum', srcField: 'userModel')
      ])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 3847653414251027679),
      lastIndexId: const obx_int.IdUid(3, 4046563617057149338),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Datum: obx_int.EntityDefinition<Datum>(
        model: _entities[0],
        toOneRelations: (Datum object) => [object.userModel],
        toManyRelations: (Datum object) => {},
        getId: (Datum object) => object.obxId,
        setId: (Datum object, int id) {
          object.obxId = id;
        },
        objectToFB: (Datum object, fb.Builder fbb) {
          final emailOffset = fbb.writeString(object.email);
          final firstNameOffset = fbb.writeString(object.firstName);
          final lastNameOffset = fbb.writeString(object.lastName);
          final avatarOffset = fbb.writeString(object.avatar);
          fbb.startTable(8);
          fbb.addInt64(0, object.obxId);
          fbb.addInt64(1, object.id);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, firstNameOffset);
          fbb.addOffset(4, lastNameOffset);
          fbb.addOffset(5, avatarOffset);
          fbb.addInt64(6, object.userModel.targetId);
          fbb.finish(fbb.endTable());
          return object.obxId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final obxIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final firstNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final lastNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final avatarParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final object = Datum(
              obxId: obxIdParam,
              id: idParam,
              email: emailParam,
              firstName: firstNameParam,
              lastName: lastNameParam,
              avatar: avatarParam);
          object.userModel.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.userModel.attach(store);
          return object;
        }),
    Support: obx_int.EntityDefinition<Support>(
        model: _entities[1],
        toOneRelations: (Support object) => [object.userModel],
        toManyRelations: (Support object) => {},
        getId: (Support object) => object.obxId,
        setId: (Support object, int id) {
          object.obxId = id;
        },
        objectToFB: (Support object, fb.Builder fbb) {
          final urlOffset = fbb.writeString(object.url);
          final textOffset = fbb.writeString(object.text);
          fbb.startTable(5);
          fbb.addInt64(0, object.obxId);
          fbb.addOffset(1, urlOffset);
          fbb.addOffset(2, textOffset);
          fbb.addInt64(3, object.userModel.targetId);
          fbb.finish(fbb.endTable());
          return object.obxId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final obxIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final urlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final textParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object =
              Support(obxId: obxIdParam, url: urlParam, text: textParam);
          object.userModel.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.userModel.attach(store);
          return object;
        }),
    UserModel: obx_int.EntityDefinition<UserModel>(
        model: _entities[2],
        toOneRelations: (UserModel object) => [object.support],
        toManyRelations: (UserModel object) => {
              obx_int.RelInfo<Datum>.toOneBacklink(7, object.obxId,
                  (Datum srcObject) => srcObject.userModel): object.data
            },
        getId: (UserModel object) => object.obxId,
        setId: (UserModel object, int id) {
          object.obxId = id;
        },
        objectToFB: (UserModel object, fb.Builder fbb) {
          fbb.startTable(7);
          fbb.addInt64(0, object.obxId);
          fbb.addInt64(1, object.page);
          fbb.addInt64(2, object.perPage);
          fbb.addInt64(3, object.total);
          fbb.addInt64(4, object.totalPages);
          fbb.addInt64(5, object.support.targetId);
          fbb.finish(fbb.endTable());
          return object.obxId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final obxIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final pageParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final perPageParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final totalParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final totalPagesParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final object = UserModel(
              obxId: obxIdParam,
              page: pageParam,
              perPage: perPageParam,
              total: totalParam,
              totalPages: totalPagesParam);
          object.support.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.support.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<UserModel>(
              object.data,
              store,
              obx_int.RelInfo<Datum>.toOneBacklink(
                  7, object.obxId, (Datum srcObject) => srcObject.userModel));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Datum] entity fields to define ObjectBox queries.
class Datum_ {
  /// See [Datum.obxId].
  static final obxId =
      obx.QueryIntegerProperty<Datum>(_entities[0].properties[0]);

  /// See [Datum.id].
  static final id = obx.QueryIntegerProperty<Datum>(_entities[0].properties[1]);

  /// See [Datum.email].
  static final email =
      obx.QueryStringProperty<Datum>(_entities[0].properties[2]);

  /// See [Datum.firstName].
  static final firstName =
      obx.QueryStringProperty<Datum>(_entities[0].properties[3]);

  /// See [Datum.lastName].
  static final lastName =
      obx.QueryStringProperty<Datum>(_entities[0].properties[4]);

  /// See [Datum.avatar].
  static final avatar =
      obx.QueryStringProperty<Datum>(_entities[0].properties[5]);

  /// See [Datum.userModel].
  static final userModel =
      obx.QueryRelationToOne<Datum, UserModel>(_entities[0].properties[6]);
}

/// [Support] entity fields to define ObjectBox queries.
class Support_ {
  /// See [Support.obxId].
  static final obxId =
      obx.QueryIntegerProperty<Support>(_entities[1].properties[0]);

  /// See [Support.url].
  static final url =
      obx.QueryStringProperty<Support>(_entities[1].properties[1]);

  /// See [Support.text].
  static final text =
      obx.QueryStringProperty<Support>(_entities[1].properties[2]);

  /// See [Support.userModel].
  static final userModel =
      obx.QueryRelationToOne<Support, UserModel>(_entities[1].properties[3]);
}

/// [UserModel] entity fields to define ObjectBox queries.
class UserModel_ {
  /// See [UserModel.obxId].
  static final obxId =
      obx.QueryIntegerProperty<UserModel>(_entities[2].properties[0]);

  /// See [UserModel.page].
  static final page =
      obx.QueryIntegerProperty<UserModel>(_entities[2].properties[1]);

  /// See [UserModel.perPage].
  static final perPage =
      obx.QueryIntegerProperty<UserModel>(_entities[2].properties[2]);

  /// See [UserModel.total].
  static final total =
      obx.QueryIntegerProperty<UserModel>(_entities[2].properties[3]);

  /// See [UserModel.totalPages].
  static final totalPages =
      obx.QueryIntegerProperty<UserModel>(_entities[2].properties[4]);

  /// See [UserModel.support].
  static final support =
      obx.QueryRelationToOne<UserModel, Support>(_entities[2].properties[5]);

  /// see [UserModel.data]
  static final data =
      obx.QueryBacklinkToMany<Datum, UserModel>(Datum_.userModel);
}
